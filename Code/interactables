class interactable {
  constructor(xpos, ypos, xvel, yvel, type) {
    this.xpos = xpos;
    this.ypos = ypos;
    this.xvel = xvel;
    this.yvel = yvel;
    this.type = type;
  }
  //getters
  get XPos() {return this.xpos;}
  get YPos() {return this.ypos;} 
  get XVel() {return this.xvel;}
  get YVel() {return this.yvel;}
  //setters
  set XPos(set) {this.xpos = set;}
  set YPos(set) {this.ypos = set;}
  set XVel(set) {this.xvel = set;}
  set YVel(set) {this.yvel = set;}
  //functions
  //gravity for interactables
  gravity() {this.yvel += 0.2;}
  //tests if y position is above a certain value, if true it will call function 'fell' which deletes the object, it also increases value of stats.fallen if object is a fruit
  move() {this.XPos += this.XVel; this.YPos += this.YVel;}
  fell() {stats.fallen++; console.log("A")}
}
class fruits extends interactable {
  constructor(xpos, ypos, xvelocity, yvelocity, type) {
    super(xpos, ypos, xvelocity, yvelocity);
    this.type = type; //type is for fruit diversity (e.g watermelon, orange, apple)
  }
  get Type() {return this.type;} //type does not require a setter as it is a constant value
  //add score, cut animation
  cut() {
    stats.score += 10;
    sounds.fruitSlice();
    cutAnimation(); //this is currently an empty function
    delete interactables[i];
  }
}
class bombs extends interactable {
  constructor(xpos, ypos, xvelocity, yvelocity) {
    super(xpos, ypos, xvelocity, yvelocity);
  }
  fell(i) {stats.score += 5; delete interactables[i]}
  cut() {
    //lower health, explode animation
    stats.health--;
    sounds.bombSlice();
    explodeAnimation(); //this is currently an empty function
  }
}
interactables = [];
function spawnInteractable() {
  setTimeout(spawnInteractable, 1000);
  i = 0;
  while(interactables[i] != undefined) i++;
  assignedX = random(300, 700);
  posNeg = assignedX < 500 ? 1 : -1;
  interactables[i] = new interactable(assignedX, 720, random(-3, 3) * posNeg, -12 - random(0,4), int(random(0, 5)));
}
function spawnBomb() {
  bombTimer = waves < 10 ? 20000 - waves * 1000 : 10000;
  setTimeout(spawnInteractable(6), bombTimer);
}
function drawInteractables(i) {
    switch(interactables[i].type) {
      case 0:
        image(apple, interactables[i].XPos, interactables[i].YPos, 80, 80);
        break;
      case 1:
        image(banana, interactables[i].XPos, interactables[i].YPos, 80, 80);
        break;
      case 2:
        image(coconut, interactables[i].XPos, interactables[i].YPos, 80, 80);
        break;
      case 3:
        image(orange, interactables[i].XPos, interactables[i].YPos, 80, 80);
        break;
      case 4:
        image(pineapple, interactables[i].XPos, interactables[i].YPos, 80, 80);
        break;
      case 5:
        image(watermelon, interactables[i].XPos, interactables[i].YPos, 80, 80);
        break;
      default:
        image(bomb, interactables[i].XPos, interactables[i].YPos, 80, 80);
        break;
  }
}
function effectInteractables() {for(let i = 0; i < interactables.length; i++) {if(interactables[i] != undefined) {
    interactables[i].move();
    interactables[i].gravity();
    drawInteractables(i);
    if(interactables[i].YPos > 800) interactables[i].fell(i);
}}}
