class interactable {
  constructor(xpos, ypos, xvel, yvel, type) {
    this.xpos = xpos;
    this.ypos = ypos;
    this.xvel = xvel;
    this.yvel = yvel;
    this.type = type;
  }
  //getters
  get XPos() {return this.xpos;}
  get YPos() {return this.ypos;} 
  get XVel() {return this.xvel;}
  get YVel() {return this.yvel;}
  //setters
  set XPos(set) {this.xpos = set;}
  set YPos(set) {this.ypos = set;}
  set XVel(set) {this.xvel = set;}
  set YVel(set) {this.yvel = set;}
  //functions
  //gravity for interactables
  static gravity() {this.yvel--;}
  //tests if y position is above a certain value, if true it will call function 'fell' which deletes the object, it also increases value of stats.fallen if object is a fruit
  static testYPos(i) {if(this.YPos > 800) interactables[i].fell();}
  static move() {this.XPos += this.XVel;  this.YPos += this.YVel;}
}
class fruits extends interactable {
  constructor(xpos, ypos, xvelocity, yvelocity, type) {
    super(xpos, ypos, xvelocity, yvelocity);
    this.type = type; //type is for fruit diversity (e.g watermelon, orange, apple)
  }
  get Type() {return this.type;} //type does not require a setter as it is a constant value
  static fell() {stats.fallen++;}
  //add score, cut animation
  static cut() {
    stats.score += 10;
    sounds.fruitSlice();
    cutAnimation(); //this is currently an empty function
  }
}
class bombs extends interactable {
  constructor(xpos, ypos, xvelocity, yvelocity) {
    super(xpos, ypos, xvelocity, yvelocity);
  }
  static fell() {stats.score += 5;}
  static cut() {
    //lower health, explode animation
    stats.health--;
    sounds.bombSlice();
    explodeAnimation(); //this is currently an empty function
  }
}
